import tkinter as tk
from tkinter import filedialog, ttk
import json
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np
from EEDFB_Finite_Mode_Solver import EEDFB_Solver
from Post_Process import index_Plot
import Post_Process
import EEDFB_Finite_Mode_Solver

### Init with json_filepath as parameter autofill (slect json template?). Select a .txt file, and the params plot will load to select indices for the mode_solver plot. 
### After loading both, if modes_solved in the 
#json_filepath = r"Data/JSON_Template.json"

### Run the script - GUI prompts the user to load the .txt file
### After loading the TXT file, Sort the data automatically 

### GUI
class App(tk.Tk):
    def __init__(self):
        super().__init__()
        
        self.title('DFB Solver')
        self.geometry('1200x720')
        
        self.params = {}
        self.default_JSON_filepath = r"Data/JSON_Template"
        self.load_default_json()
        self.canvas = None
        
        
        
        self.load_default_COMSOL_data()

        ### JSON File Selection
        self.add_file_button()
        ### COMSOL File Selection (.txt) only
        self.add_file_button()

        ### By default, the parameters of the file (contained in the JSON file under the varname 'filename')
        ### The plot is generated by index_Plot from Post_Process. Inputs are the first two columns of the .txt file, i.e. after running Sort,
        ### derived_values = Sort(filename, wavelength, Lambda)
        ### params['cladding_thickness'] = derived_values['params'][0]
        ### params['grating_height'] = derived_values['params'][1]
        self.add_plot()


        # Add entry widgets for parameters
        self.add_parameter_entries()
        
    def load_default_json(self):
        default_JSON = self.default_JSON_filepath
        self.params = load_parameters(default_JSON)

    def load_default_COMSOL_data(self):
        filename = self.params['filename']
        ### Assuming the Data folder is being used. This can be changed.
        self.filename = "Data/" + filename
        
    def load_JSON(self):
        pass
    
    def load_COMSOL_data(self):
        pass

    def update_GUI(self):
        pass

    def add_menu(self):
        self.menu_bar = tk.Menu(self)
        self.file_menu = tk.Menu(self.menu_bar, tearoff=0)
        self.file_menu.add_command(label="Load parameters file (.json)", command=self.open_json_file)
        self.file_menu.add_command(label="Load COMSOL results (.txt)", command=self.open_txt_file)
        self.menu_bar.add_cascade(label="File", menu=self.file_menu)
        self.config(menu=self.menu_bar)

    def open_json_file(self):
        filepath = filedialog.askopenfilename(filetypes=[("Parameters Files", "*.json")])
        if filepath:
            self.load_default_json(filepath)

    def open_txt_file(self):
        filepath = filedialog.askopenfilename(filetypes=[("COMSOL Results Files", "*.txt")])
        if filepath:
            print(f"Selected TXT file: {filepath}")
            
    def add_widgets(self):
        self.run_sim_button = ttk.Button(self, text="Run Simulation", command=lambda: self.run_simulation(self.params))
        self.run_sim_button.pack(pady=10)

        self.post_process_button = ttk.Button(self, text="Post-Process", command=lambda: Post_Process(self.params))
        self.post_process_button.pack(pady=10)
    def run_simulation(self, params):
        updated_params = run_simulation(params)
        self.params.update(updated_params)  # Update the internal parameter state
        self.update_gui_based_on_params() 
        
    def add_plot(self):
        fig, ax = plt.subplots()
        x = np.linspace(0, 2*np.pi, 100)
        y = np.sin(x)
        ax.plot(x, y)
        self.canvas = FigureCanvasTkAgg(fig, master=self)  # A tk.DrawingArea.
        self.canvas.draw()
        self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

    def add_file_button(self):
        self.open_file_button = ttk.Button(self, text='Open File', command=self.open_file)
        self.open_file_button.pack()

    def open_file(self):
        file_path = filedialog.askopenfilename()
        print(f'Selected file: {file_path}')
        # Here you can add functionality to read or process the file

    def add_parameter_entries(self):
        self.param_frame = tk.Frame(self)
        self.param_frame.pack(side=tk.BOTTOM, fill=tk.X)

        tk.Label(self.param_frame, text='Parameter 1').pack(side=tk.LEFT)
        self.param1_entry = ttk.Entry(self.param_frame)
        self.param1_entry.pack(side=tk.LEFT)

        tk.Label(self.param_frame, text='Parameter 2').pack(side=tk.LEFT)
        self.param2_entry = ttk.Entry(self.param_frame)
        self.param2_entry.pack(side=tk.LEFT)

        self.update_button = ttk.Button(self.param_frame, text='Update Parameters', command=self.update_parameters)
        self.update_button.pack(side=tk.RIGHT)

    def update_parameters(self):
        param1 = self.param1_entry.get()
        param2 = self.param2_entry.get()
        print(f'Parameter 1: {param1}, Parameter 2: {param2}')
        # Here you can add functionality to update JSON file or process parameters

if __name__ == '__main__':
    app = App()
    app.mainloop()
